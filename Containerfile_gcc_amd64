FROM docker.io/ubuntu:22.04 

# Dockerfile variables.
ENV DEBIAN_FRONTEND=noninteractive
ENV PS1='\[\e[0;32m\]\u@\h:\[\e[0;34m\]\w\[\e[0m\]\$ '
ENV LS_COLORS='di=1;34:ln=1;36:so=1;35:pi=33:ex=1;32:bd=1;33;40:cd=1;33;40:su=37;41:sg=30;43:tw=30;42:ow=30;43'
# aliases:
# alias ls='ls --color=auto'
# alias cdw='cd $COMMON'
# alias cds='cd $SCRATCH'
# alias cdh='cd $HOME'
# alias status="clear && squeue -u krishnaa"
ENV SHELL=/bin/sh
# ENV GCC_VER=12.2.0 for perlmutter module load. 
ENV GCC_VER=11.4.0
ENV SCRATCH=/usr/local
ENV PATH="$SCRATCH/bin:$PATH"
ENV CPATH="$SCRATCH/include"
ENV LIBRARY_PATH="$SCRATCH/lib"
ENV LD_LIBRARY_PATH="$SCRATCH/lib"
ENV CONDA_ROOT=$SCRATCH/miniconda
ENV PATH=$CONDA_ROOT/bin:$PATH

# common apt. 
RUN mkdir -p /app \
&& apt update  \
&& apt install -y \
  build-essential \ 
  software-properties-common \
  libssl-dev \
  bison \
  flex \
  nasm \ 
  gfortran \ 
  python3 \
  python3-pip \
  cmake \ 
  cmake-curses-gui \ 
  ninja-build \
  meson \
  autoconf \ 
  libtool \ 
  pkg-config \ 
  wget \ 
  curl \ 
  vim \ 
  git \ 
  libgl1-mesa-dev \ 
  libglu1-mesa-dev \ 
  libgl1-mesa-glx \
  libgtk-4-dev libgirepository1.0-dev libcairo2-dev gir1.2-glib-2.0 \
  qt6-base-dev qt6-tools-dev qt6-tools-dev-tools \
  tzdata 

# common python. 
RUN cd /app \
&& ln -sf /usr/bin/python3 /usr/bin/python \
&& ln -sf /usr/bin/pip3 /usr/bin/pip \
&& pip3 install cmake ninja cython

# miniconda. 
RUN cd /app \
&& wget -O miniconda.sh https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh \
&& chmod +x miniconda.sh \
&& bash miniconda.sh -b -p $CONDA_ROOT \
&& rm -rf miniconda.sh 

# cmake. 
RUN cd /app \
&& wget -O cmake.tar.gz https://github.com/Kitware/CMake/archive/refs/tags/v4.0.0.tar.gz \
&& tar -xzvf cmake.tar.gz && mv CMake-* cmake \
&& cd cmake \
&& CC=gcc CXX=g++ FC=gfortran ./bootstrap --prefix=$SCRATCH \
&& make -j8 && make install \
&& cd .. \
&& rm -rf cmake*

# boost. 
RUN cd /app \
&& wget -O boost.tar.gz https://archives.boost.io/release/1.87.0/source/boost_1_87_0.tar.gz \
&& tar -xzvf boost.tar.gz && rm -rf boost.tar.gz && mv boost* boost \
&& cd boost \
&& ./bootstrap.sh --prefix=$SCRATCH \
&& ./b2 -j8 install --prefix=$SCRATCH \
&& cd .. \
&& rm -rf boost*

# openblas. 
RUN cd /app \
&& source ~/.bashrc \
&& wget -O openblas.tar.gz https://github.com/OpenMathLib/OpenBLAS/releases/download/v0.3.29/OpenBLAS-0.3.29.tar.gz \
&& tar-xzvf openblas.tar.gz && mv OpenBLAS-* openblas \
&& cd openblas \
&& make USE_OPENMP=1 COMMON_OPT="-fPIC" -j8 \
&& make install PREFIX=$SCRATCH \
&& cd .. \
&& rm -rf openblas* 

# numpy, jax, xarray, pandas, scipy, sympy. 
RUN cd /app \
&& pip3 install numpy jax xarray pandas scipy sympy 

# mpich, mpi4py. 
RUN cd /app \
&& wget -O mpich.tar.gz https://github.com/pmodels/mpich/releases/download/v4.2.2/mpich-4.2.2.tar.gz \
&& tar -xzvf mpich.tar.gz && mv mpich-* mpich \
&& cd mpich \
&& ./autogen.sh \
&& CC=gcc CXX=g++ FC=gfortran ./configure --prefix=$SCRATCH \
&& make -j8 && make install \
&& cd .. \
&& rm -rf mpich* \
&& MPICC=mpicc CC=gcc pip3 install --no-binary=mpi4py mpi4py==4.0.0

# scalapack. 
COPY SLmake.inc_mpich_openmpi /app/
RUN cd /app \
&& wget -O scalapack.tar.gz https://github.com/Reference-ScaLAPACK/scalapack/archive/refs/tags/v2.2.2.tar.gz \
&& tar -xzvf scalapack.tar.gz && mv scalapack-* scalapack \
&& cd scalapack \
&& cp ../SLmake.inc* ./SLmake.inc \
&& make lib \
&& cp ./libscalapack.a $SCRATCH/lib/libscalapack.a \
&& cd .. \
&& rm -rf scalapack* SLmake.inc*

# elpa. 
RUN cd /app \
&& wget -O elpa.tar.gz https://github.com/marekandreas/elpa/archive/refs/tags/new_release_2024.05.001.tar.gz \
&& tar -xzvf elpa.tar.gz && mv elpa-* elpa \
&& cd elpa \
&& ./autogen.sh \
&& CC=mpicc CXX=mpic++ FC=mpif90 ./configure --prefix=$SCRATCH --disable-sse --disable-sse-assembly --disable-avx --disable-avx2 --disable-avx512 CFLAGS="-O3 -fPIC" LDFLAGS="-L$SCRATCH/lib" LIBS="-lscalapack -lopenblas" \
&& make -j8 && make install \
&& ln -sf $SCRATCH/include/elpa-*/elpa $SCRATCH/include/elpa \
&& cp $SCRATCH/include/elpa-*/modules/* $SCRATCH/include/ \
&& cd .. \
&& rm -rf elpa* 

# fftw. 
RUN cd /app \
&& wget -O fftw3.tar.gz https://fftw.org/fftw-3.3.10.tar.gz \
&& tar -xzvf fftw3.tar.gz && mv fftw-* fftw3 \
&& cd fftw3 \
&& autoreconf -i \
&& CC=mpicc CXX=mpic++ FC=mpif90 ./configure --prefix=$SCRATCH CFLAGS="-fPIC" FCFLAGS="-fPIC" --enable-shared --enable-openmp --enable-mpi \
&& make -j8 && make install \
&& CC=mpicc CXX=mpic++ FC=mpif90 ./configure --prefix=$SCRATCH CFLAGS="-fPIC" FCFLAGS="-fPIC" --enable-shared --enable-openmp --enable-mpi --enable-single \
&& make -j8 && make install \
&& cd .. \
&& rm -rf fftw3* 

# zlib. 
RUN cd /app \
&& wget -O zlib.tar.gz https://github.com/madler/zlib/releases/download/v1.3.1/zlib-1.3.1.tar.gz \
&& tar -xzvf zlib.tar.gz && mv zlib-* zlib \
&& cd zlib \
&& ./configure --prefix=$SCRATCH \
&& make -j8 && make install \
&& cd .. \
&& rm -rf zlib*

# hdf5, h5py. 
RUN cd /app \
&& wget -O hdf5.tar.gz https://github.com/HDFGroup/hdf5/archive/refs/tags/hdf5_1.14.6.tar.gz \
&& tar -xzvf hdf5.tar.gz && mv hdf5-* hdf5 \
&& cd hdf5 \
&& mkdir build \
&& cmake -S . -B build -DCMAKE_INSTALL_PREFIX=$SCRATCH -DHDF5_BUILD_FORTRAN=ON -DHDF5_ENABLE_PARALLEL=ON -DHDF5_ENABLE_ZLIB_SUPPORT=ON \
&& cmake --build build \
&& cmake --install build \
&& cd .. \
&& rm -rf hdf5* \
&& CC=mpicc HDF5_MPI="ON" HDF5_DIR="$SCRATCH"  pip3 install --no-binary=h5py h5py

# netcdf-c, netcdf-fortran, ncpy. 
RUN cd /app \
# netcdf-c.
&& wget -O netcdf-c.tar.gz https://github.com/Unidata/netcdf-c/archive/refs/tags/v4.9.3.tar.gz \
&& tar -xzvf netcdf-c.tar.gz && mv netcdf-c-* netcdf-c \
&& cd netcdf-c \
&& autoreconf -i \
&& CC=mpicc CXX=mpic++ FC=mpif90 ./configure --prefix=$SCRATCH --disable-libxml2 --disable-dap --disable-nczarr \
&& make -j8 && make install \
&& cd .. \
&& rm -rf netcdf-c* \
# netcdf-fortran. 
&& wget -O netcdf-fortran.tar.gz  https://github.com/Unidata/netcdf-fortran/archive/refs/tags/v4.6.2.tar.gz \
&& tar -xzvf netcdf-fortran.tar.gz && mv netcdf-fortran-* netcdf-fortran \
&& cd netcdf-fortran \
&& autoreconf -i \
&& CC=mpicc CXX=mpic++ FC=mpif90 ./configure --prefix=$SCRATCH \
&& make -j8 && make install \
&& cd .. \
&& rm -rf netcdf-fortran* \
# netcdf-python. 
&& wget -O netcdf4-python.tar.gz https://github.com/Unidata/netcdf4-python/archive/refs/tags/v1.7.1.post1.tar.gz \
&& tar -xzvf netcdf4-python.tar.gz && mv netcdf4-python-* netcdf4-python \
&& cd netcdf4-python \
&& pip3 install -v . \
&& cd .. \
&& rm -rf netcdf4-python*

# petsc, slepc, petsc4py, slepc4py. 
RUN cd /app \
# petsc.
&& wget -O petsc.tar.gz https://web.cels.anl.gov/projects/petsc/download/release-snapshots/petsc-3.22.4.tar.gz \
&& tar -xzvf petsc.tar.gz \
&& mv petsc-* petsc \
&& cd petsc \
&& ./configure --prefix=$SCRATCH --with-scalar-type=complex --with-hdf5-dir=$SCRATCH \
&& make -j8 && make install \
&& cd .. \
&& rm -rf petsc* \
# slepc. 
&& wget -O slepc.tar.gz https://slepc.upv.es/download/distrib/slepc-3.22.2.tar.gz \
&& tar -xzvf slepc.tar.gz \
&& mv slepc-* slepc \
&& cd slepc \
&& ./configure --prefix=$SCRATCH \
&& make SLEPC_DIR=/app/slepc PETSC_DIR=$SCRATCH -j8 && make SLEPC_DIR=/app/slepc PETSC_DIR=$SCRATCH install \
&& cd .. \
&& rm -rf slepc* \
# petsc4py.
&& wget -O petsc4py.tar.gz https://web.cels.anl.gov/projects/petsc/download/release-snapshots/petsc4py-3.22.4.tar.gz \
&& tar -xzvf petsc4py.tar.gz && mv petsc4py-* petsc4py \
&& cd petsc4py \
&& CC=mpicc CXX=mpic++ FC=mpif90 PETSC_DIR=$SCRATCH pip3 install . \
&& cd .. \
&& rm -rf petsc4py* \
# slepc4py. 
&& wget -O slepc4py.tar.gz https://slepc.upv.es/download/distrib/slepc4py-3.22.2.tar.gz \
&& tar -xzvf slepc4py.tar.gz && mv slepc4py-* slepc4py \
&& cd slepc4py \
&& CC=mpicc CXX=mpic++ FC=mpif90 PETSC_DIR=$SCRATCH SLEPC_DIR=$SCRATCH pip3 install . \
&& cd .. \
&& rm -rf slepc4py* 

# qe, west, westpy.
COPY ./kmesh.pl  /app/
RUN cd /app \
&& source ~/.bashrc \
# qe. 
&& wget -O qe.tar.gz https://gitlab.com/QEF/q-e/-/archive/qe-7.3.1/q-e-qe-7.3.1.tar.gz \
&& tar -xzvf qe.tar.gz && mv q-e-* qe \
&& cd qe \
&& CC=mpicc CXX=mpic++ FC=mpif90 ./configure --prefix=$SCRATCH --with-scalapack=yes --with-elpa-include=$SCRATCH/include --with-elpa-lib=$SCRATCH/lib/libelpa.a -with-hdf5=yes --with-hdf5-include=$SCRATCH/include --with-hdf5-libs="-L$SCRATCH/lib -lhdf5_hl_fortran -lhdf5_hl -lhdf5_fortran -lhdf5 -lz -ldl -lm" \
&& make all -j8 || true && make all -j8 && make epw -j8 \
# west.
&& wget -O West.tar.gz https://github.com/west-code-development/West/archive/refs/tags/v6.2.0.tar.gz \
&& tar -xzvf West.tar.gz && mv West-* West \
&& cd ./West \
&& CC=mpicc F90=mpif90 MPIF90=mpif90 BLAS_LIBS="-L$SCRATCH -lopenblas" LAPACK_LIBS="-L/usr/local -lopenblas" LIBDIRS="-L$SCRATCH " make conf PYT=python3 PYT_LDFLAGS="`python3-config --ldflags --embed`" \
&& make all -j8 \
&& cd .. \
&& make install \
&& cd .. \
# westpy. 
&& wget -O westpy.tar.gz https://github.com/west-code-development/westpy/archive/refs/tags/v6.2.0.tar.gz \
&& tar -xzvf westpy.tar.gz && mv westpy-* westpy \
&& cd westpy \
&& pip install . \
&& cd .. \
&& cp ./kmesh.pl $SCRATCH/bin/kmesh.pl \
&& rm -rf westpy* qe* kmesh.pl 

# abinit, abipy. 
RUN cd /app \
&& wget -O abinit.tar.gz https://github.com/abinit/abinit/archive/refs/tags/10.2.7.tar.gz \
&& tar -xzvf abinit.tar.gz && mv abinit-* abinit \
&& cd abinit \
&& ./autogen.sh \
&& CC=mpicc CXX=mpic++ FC=mpif90 ./configure --prefix=$SCRATCH \
  # --with-mpi="yes" \
  # --enable-mpi-io="yes" \
  # --with-linalg-flavor="openblas+netlib" \
  # LINALG_LIBS="-L$SCRATCH -lelpa -lscalapack -lopenblas" \
  # --with-fftw3="yes" \
  # --with-fft-flavor="fftw3" \
  # --with-libxc="yes" \
  # --with-hdf5="yes" \
  # --with-netcdf="yes" \
  # --with-netcdf-fortran="yes" \
&& make -j8 \
&& make install \
&& cd .. \
&& rm -rf abinit* \
# abipy. 
&& wget -O abipy.tar.gz https://github.com/abinit/abipy/archive/refs/tags/0.9.8.tar.gz \
&& tar -xzvf abipy.tar.gz && mv abipy-* abipy \
&& cd abipy \
&& pip install . \
&& cd .. \
&& rm -rf abipy*

# siesta. 
RUN cd /app \
&& source ~/.bashrc \
&& wget -O siesta.tar.gz https://gitlab.com/siesta-project/siesta/-/releases/5.2.2/downloads/siesta-5.2.2.tar.gz \
&& tar -xzvf siesta.tar.gz && mv siesta-* siesta \
&& cd siesta \
&& mkdir build \
&& cmake -S . -B ./build -DCMAKE_INSTALL_PREFIX=$SCRATCH \
  -DCMAKE_POLICY_VERSION_MINIMUM=3.5 \
  -DCMAKE_PREFIX_PATH=$SCRATCH \
  -DLAPACK_LIBRARY=openblas \
  -DLAPACK_LIBRARY_DIR=$SCRATCH \
  -DSCALAPACK_LIBRARY_DIR=$SCRATCH \
  -DNetCDF_ROOT=$SCRATCH \
  -DSIESTA_WITH_MPI=ON \
  -DSIESTA_WITH_OPENMP=ON \
  -DSIESTA_WITH_FFTW=ON \
  -DSIESTA_WITH_LIBXC=ON \
  -DSIESTA_WITH_ELPA=ON \
  -DSIESTA_WITH_FLOOK=OFF \
  -DCMAKE_C_COMPILER=mpicc \
  -DCMAKE_CXX_COMPILER=mpic++ \
  -DCMAKE_Fortran_COMPILER=mpif90 \
&& cmake --build build -j 8 \
&& cmake --install build \
&& cd .. \
&& rm -rf siesta*

# abacus. 
RUN cd /app \
&& wget -O abacus.tar.gz https://github.com/abacusmodeling/abacus-develop/archive/refs/tags/v3.9.0.tar.gz \
&& tar -xzvf abacus.tar.gz && mv abacus-develop-* abacus \
&& cd abacus \
&& mkdir -p build \
&& CXX=mpic++ cmake -B build -DCMAKE_INSTALL_PREFIX=$SCRATCH \
&& cmake --build build -j8 \
&& cmake --install build \
&& cd .. \
&& rm -rf abacus* 

# openmx. 
COPY ./openmx_makefile /app/
RUN cd /app \
&& wget -O openmx.tar.gz https://www.openmx-square.org/openmx3.9.tar.gz \
&& wget -O patch.tar.gz https://www.openmx-square.org/bugfixed/21Oct17/patch3.9.9.tar.gz \
&& tar -xzvf openmx.tar.gz && rm -rf openmx.tar.gz && mv openmx3.9 openmx \
&& cd openmx/source \
&& cp ../../patch.tar.gz . \
&& tar -xzvf patch.tar.gz && rm -rf patch.tar.gz \
&& cp ../../openmx_makefile ./makefile \
&& make \
&& cp ./openmx $SCRATCH/openmx \
&& cd ../../ \
&& rm -rf openmx* patch* 

# lammps. 
RUN cd /app \
&& wget -O lammps.tar.gz https://github.com/lammps/lammps/archive/refs/tags/stable_29Aug2024_update2.tar.gz \
&& tar -xzvf lammps.tar.gz && mv lammps-* lammps \
&& cd lammps \
&& mkdir -p build \
&& cmake -S ./cmake -B build -DCMAKE_INSTALL_PREFIX=$SCRATCH -DCMAKE_C_COMPILER=mpicc -DCMAKE_CXX_COMPILER=mpic++ -DCMAKE_Fortran_COMPILER=mpif90 \
&& cmake --build build -j8 \
&& cmake --install build \
&& cd ../ \
&& rm -rf lammps* 

# bgw, bgwpy, bgwtools. 
COPY arch_gcc_cpu.mk /app/
RUN cd /app \
# Below link obtained from berkeleygw.org website. 
&& wget -O bgw.tar.gz https://app.box.com/shared/static/22edl07muvhfnd900tnctsjjftbtcqc4.gz \
&& tar -xzvf bgw.tar.gz && mv BerkeleyGW* bgw \
&& cd bgw \
&& cp ../arch_gcc_cpu.mk ./arch.mk \
&& make all-flavors -j8 \
&& make install INSTDIR=$SCRATCH \
&& cd .. \
&& rm -rf arch* bgw* 
# # bgwpy, bgwtools. 
# && git clone https://github.com/BerkeleyGW/BGWpy.git && mv BGWpy bgwpy \
# && git clone https://github.com/BerkeleyGW/bgwtools.git \
# && cd bgwpy \
# && pip install . \
# && cd .. \
# && cd bgwtools \
# && pip install . \
# && cd .. \
# && rm -rf bgw* 

# yambo, yambopy. 
RUN cd /app \
&& wget -O yambo.tar.gz https://github.com/yambo-code/yambo/archive/refs/tags/5.3.0.tar.gz \
&& tar -xzvf yambo.tar.gz && mv yambo-* yambo \
&& cd yambo \
&& ./configure --prefix=$SCRATCH \
  --with-mpi-path=$SCRATCH \
  --enable-mpi \
  --enable-open-mp \
  --enable-par-linalg \
  --enable-slepc-linalg \
  --with-blas-libs="-L$SCRATCH/lib -lopenblas -lmpifort -lmpi" \
  --with-lapack-libs="-L$SCRATCH/lib -lopenblas  -lmpifort -lmpi" \
  --with-blacs-libs="-L$SCRATCH/lib -lscalapack -lopenblas  -lmpifort -lmpi" \
  --with-scalapack-libs="-L$SCRATCH/lib -lscalapack -lopenblas  -lmpifort -lmpi" \
  --with-petsc-path=$SCRATCH \
  --with-slepc-path=$SCRATCH \
  --with-fft-path=$SCRATCH \
  --with-hdf5-path=$SCRATCH \
  --with-netcdf-path=$SCRATCH \
  --with-netcdff-path=$SCRATCH \
  --with-libxc-path=$SCRATCH \
  --with-libxc-includedir=$SCRATCH/include \
  --with-libxc-libdir=$SCRATCH/lib \
  --with-libxc-libs="-L$SCRATCH/lib -llxcf90 -lxcf03 -lxc  -lmpifort -lmpi" \
&& make all -j6 \
&& cd ../ \
&& rm -rf yambo* \
# yambopy.
&& wget -O yambopy.tar.gz https://github.com/yambo-code/yambopy/archive/refs/tags/v0.4.0.tar.gz \
&& tar -xzvf yambopy.tar.gz && mv yambopy-* yambopy \
&& cd yambopy \
&& pip install . \
&& cd .. \
&& rm -rf yambopy* 

# torch: from source. 
# Frontera: CMAKE_C_COMPILER=mpicc CMAKE_CXX_COMPILER=mpicxx CMAKE_CXX_FLAGS="-fstack-protector" MAX_JOBS=8 USE_MPI=1 USE_CUDA=0 USE_FBGEMM=0 BUILD_TEST=OFF python3 setup.py develop
# Perlmutter: CMAKE_C_COMPILER=mpicc CMAKE_CXX_COMPILER=mpicxx MAX_JOBS=16 USE_CUDA=1 USE_DISTRIBUTED=1 USE_MPI=1 USE_SYSTEM_NCCL=1 BUILD_TEST=0 USE_NNPACK=0 USE_QNNPACK=0 USE_PYTORCH_QNNPATCK=0 USE_XNNPACK=0 python3 setup.py develop
RUN cd /app \
&& git clone --recursive https://github.com/pytorch/pytorch.git 
RUN cd /app \
&& cd pytorch \
&& pip3 install -r requirements.txt \
&& export CMAKE_PREFIX_PATH=$CONDA_ROOT \
&& USE_CUDA=0 USE_MPI=1 MAX_JOBS=2 python3 setup.py develop  

# torchvision: from source. 
# Perlmutter: CC=mpicc CXX=mpicxx MAX_JOBS=16 python3 setup.py install
RUN cd /app \
&& git clone https://github.com/pytorch/vision.git \
&& cd vision \
&& MAX_JOBS=2 python3 setup.py install  \
&& cd .. && rm -rf vision 

# torch_geometric, pyg_lib, torch_cluster: from source?
RUN cd /app \
&& pip3 install torch_geometric \
&& pip install pyg_lib torch_scatter torch_sparse torch_cluster torch_spline_conv -f https://data.pyg.org/whl/torch-2.2.0+cpu.html 

# scikit-learn, joblib, xgboost. 
# torch, torchvision, torchaudio, torch_geometric, torch_cluster, lightning, tensorly. 
# tensorboard, torchserve. 
# transformers, accelerate, evaluate, diffusers, e3nn. 
RUN cd /app \
&& apt install -y ffmpeg \
&& pip3 install scikit-learn joblib xgboost \
# && pip3 install torch torchvision torchaudio torch_geometric torch_cluster \
&& pip3 install lightning tensorly \
&& pip3 install tensorboard torch-serve torch-model-archiver \
&& pip3 install transformers accelerate evaluate diffusers e3nn

# gui, plotting: ffmpeg, matplotlib, seaborn, vtk, pyvista[qt], pyvistaqt. 
RUN cd /app \
&& conda install -y -c conda-forge vtk  \
&& pip3 install matplotlib seaborn vtk pyvista[qt] pyvistaqt 

# data and io libraries python:
# dask, lark, pywavelets, networkx. 
# dill, pyyaml, xmltodict, sqlite, jupyterlab, fastapi, pyopengl. 
RUN cd /app \
&& pip3 install dask[complete] dask_mpi \
&& pip3 install lark-parser pywavelets networkx dill pyyaml xmltodict sqlite \
&& pip3 install jupyterlab fastapi \
&& pip3 install pyopengl --no-build-isolation 

# fp libraries:
# ase, gpaw, qutip, astropy, deephpack, hpro, pyscf.  
COPY ./DeepH-pack.tar.gz ./HPRO.tar.gz /app/
RUN cd /app \
&& pip3 install ase gpaw qutip astropy \
&& pip3 install --prefer-binary pyscf \
# deephpack. 
&& pip3 install pathos \ 
&& apt update -y && apt install -y cargo \
&& cargo install juliaup --locked \
&& julia -e 'using Pkg; \
  Pkg.add("Arpack"); \
  Pkg.add("HDF5"); \
  Pkg.add("ArgParse"); \
  Pkg.add("JLD"); \
  Pkg.add("JSON"); \
  Pkg.add("IterativeSolvers"); \
  Pkg.add("DelimitedFiles"); \
  Pkg.add("StaticArrays"); \
  Pkg.add("LinearMaps"); \
  Pkg.add("Pardiso");' \
&& tar -xzvf DeepH-pack.tar.gz && cd DeepH-pack \
&& pip3 install . \
&& cd .. \
&& rm -rf DeepH-pack* \
# hpro. 
&& tar-xzvf HPRO.tar.gz && cd HPRO/src \
&& pip3 install . \
&& cd ../../ \
&& rm -rf HPRO* 
ENV PATH="~/.cargo:$PATH"

# fix e3nn. 
RUN cd /app \
&& pip3 install --force-reinstall --no-deps --no-cache e3nn 